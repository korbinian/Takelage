// Font Stacks

$sans:             alegreya, OpenSans, arial, helvetica, sans-serif;
$serif:            Georgia, serif;
$display:          leaguegothic, cubano, leaguegothic,steelfish, helvetica, arial, helvetica, sans-serif;
$caption:          alegreya, OpenSans,Verdana, sans-serif;
$mono:             "Menlo", "Bitstream Vera Sans", Monaco, "Andale Mono", "Lucida Console", "Droid Mono", monospace;
$icons:            fontawesome;

$copy:             $sans;
$code:             $mono;

// Font Weights

$light:            400;
$normal:           400;
$bold:             700;




// VARIABLES
// =========

// Colours

$black:            #000;
$white:            #fff;
$orange:           #ff8800;
$purple:           #4d004d;
$color-primary:    $orange;
$color-secondary:  $black;
$color-link:       darken($purple, 0%);
$color-selection:  #000;
$muted:            #6F6F6F;

// Base Sizes

$base-font-size:   12;
$base-line-height: 18;
$base-fs:          $base-font-size;
$base-lh:          $base-line-height;

$ratio:            1.5em;
$r2:               3em;
$unit:             5em;

// Variables

$col: 5em;
$gutter: .75em;
$padding: .75em;
$ratio: 1.5em;

@mixin col($span: $columns of $container-columns, $display: block) {
  $columns: nth($span, 1);
  $container-columns: container-span($span);
    display: block;
    float: left;
    width: $columns * $col; }
@mixin box () {
  padding: $padding; }
@mixin shift($n-columns: 1) {
  margin-left: $n-columns * $col; }
@mixin full() {
  width: 100%; }
@mixin prefix-property($property, $value, $supportWebkit: true, $supportFirefox: true, $supportExplorer: true, $supportOpera: true ) {
  @if $supportWebkit   { -webkit-#{$property}: $value; }
  @if $supportFirefox  {    -moz-#{$property}: $value; }
  @if $supportExplorer {     -ms-#{$property}: $value; }
  @if $supportOpera    {      -o-#{$property}: $value; }
  #{$property}: $value; }

@mixin prefix-value($property, $value, $supportWebkit: true, $supportFirefox: true, $supportExplorer: true, $supportOpera: true ) {
  @if $supportWebkit   { #{$property}: -webkit-#{$value}; }
  @if $supportFirefox  { #{$property}:    -moz-#{$value}; }
  @if $supportExplorer { #{$property}:     -ms-#{$value}; }
  @if $supportOpera    { #{$property}:      -o-#{$value}; }
  #{$property}: $value; }

@mixin text-shadow($arguments: 1px 1px 0 rgba(0,0,0,1)) {
  text-shadow: unquote($arguments); }

@mixin box-shadow($arguments: 2px 2px 2px 2px rgba(0,0,0,1)) {
  @include prefix-property(box-shadow, unquote($arguments)); }

@mixin linear-gradient($top, $bottom) {
  @include prefix-value(background-image, linear-gradient($top, $bottom)); }

@mixin transition($property:all, $duration:0.2s, $function: ease-in-out) {
  @include prefix-property(transition, unquote($property $duration $function));
  -webkit-transform: translateZ(0); }

@mixin scale($scale:1) {
  @include prefix-property(transform, scale($scale)); }

@mixin rotate($rotate:-2deg) {
  @include prefix-property(transform, rotate($rotate)); }

@mixin box-sizing($arguments) {
  @include prefix-property(box-sizing, unquote($arguments)); }

@mixin f($size:base-font-size, $line: $size * $ratio, $margin:$line){
  font-size:   ($size) + px;
  line-height: ($line) + px;
  margin: 0 0 ($margin) + px 0;
  font-size:   ($size * .625 / 10) + rem;
  line-height: ($line * .625 / 10) + rem;
  margin: 0 0 ($margin * .625 / 10) + rem 0; }

@mixin fs($size:base-font-size){
  font-size:   ($size) + px;
  font-size:   ($size * .625 / 10) + rem; }

@mixin fl($line: $size * $ratio){
  line-height: ($line) + px;
  line-height: ($line * .625 / 10) + rem; }

@mixin fm($margin:$ratio){
  margin: 0 0 ($margin) + px 0;
  margin: 0 0 ($margin * .625 / 10) + rem 0; }

@mixin font-face($font-family, $file-path, $weight: normal, $style: normal ) {
  @font-face {
      font-family: $font-family;
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
           url('#{$file-path}.woff') format('woff'),
           url('#{$file-path}.ttf') format('truetype'),
           url('#{$file-path}.svg##{$font-family}') format('svg');
      font-weight: $weight;
      font-style: $style; } }

@mixin image-rendering($mode:optimizeQuality) {
  @if ($mode == optimize-contrast) {
      image-rendering: -moz-crisp-edges;
      image-rendering: -o-crisp-edges;
      image-rendering: -webkit-optimize-contrast;
      image-rendering: optimize-contrast; }
  @else {
      image-rendering: $mode; } }

@mixin inline-block {
  display: inline-block;
  vertical-align: baseline;
  zoom: 1;
  *display: inline;
  *vertical-align: auto; }

@mixin mask($url: url(../images/mask.png)) {
  @include prefix-property(mask-image, $url); }

@mixin hidden { 
  background-color: transparent;
  border: 0;
  color: transparent;
  font: 0/0 a;
  text-shadow: none; }
  
@mixin btn () {
  border: 0 solid;
  padding: $ratio/2;}

@mixin clearfix {
  zoom: 1;
  &:before,
  &:after {
    content: "";
    display: table; }
  &:after {
    clear: both; } }


// FUNCTIONS
// =========

@function modular-scale($value, $increment, $ratio) {
  @if $increment > 0 {
    @for $i from 1 through $increment {
      $value: ($value * $ratio);
    }
  }
  @if $increment < 0 {
    $increment: abs($increment);
    @for $i from 1 through $increment {
      $value: ($value / $ratio);
    }
  }
  @return $value;
}


@function golden-ratio($value, $increment) {
  @return modular-scale($value, $increment, 1.618);
}

@function tint($color, $percent){
  @return mix(white, $color, $percent);
}

@function shade($color, $percent){
  @return mix(black, $color, $percent);
}




